---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import ProseLayout from "@layouts/ProseLayout.astro";
import { formatDate } from "@lib/utils";
import { htmlToText } from "html-to-text";
import getReadingTime from "reading-time";
import { posts } from "@data/posts";

export async function getStaticPaths() {
  return posts.map((post, id) => {
    return {
      params: { slug: post.slug },
      props: {
        post,
        readingTime: getReadingTime(post.content),
        previousPost:
          id > 0
            ? {
                title: posts[id - 1].title,
                slug: posts[id - 1].slug,
              }
            : null,
        nextPost:
          id + 1 < posts.length
            ? {
                title: posts[id + 1].title,
                slug: posts[id + 1].slug,
              }
            : null,
      },
    };
  });
}

const { post, readingTime, previousPost, nextPost } = Astro.props;
---

<ProseLayout
  title={post.title}
  description={htmlToText(post.excerpt)}
  ogType="article"
  ogImage={post.featuredImage.sourceUrl}
  ogImageAlt={post.featuredImage.altText?.length
    ? post.featuredImage.altText
    : post.featuredImage.title}
>
  <div class="h-96 bg-white">
    <Image
      class="m-auto h-full w-auto object-contain"
      src={post.featuredImage.sourceUrl}
      alt={post.featuredImage.altText?.length
        ? post.featuredImage.altText
        : post.featuredImage.title}
      height="384"
      width="458"
    />
  </div>
  <div class="mb-6 mt-6 flex flex-col">
    <h1 class="w-full">{post.title}</h1>
    <div class="flex justify-end space-x-2">
      <div class="badge badge-accent badge-outline flex-none cursor-default">
        {Math.round(readingTime.minutes)}
        {Math.round(readingTime.minutes) == 1 ? "minuto" : "minuti"}
      </div>
      <div class="badge badge-primary badge-outline flex-none cursor-default">
        {formatDate(post.date)}
      </div>
    </div>
  </div>
  <div set:html={post.content} />
  <div class="divider"></div>
  <div
    class="flex flex-col space-y-4 sm:flex-row sm:justify-between sm:space-y-0"
  >
    {
      previousPost ? (
        <a
          href={`/blog/${previousPost.slug}`}
          title={previousPost.title}
          class="btn btn-ghost w-full justify-start uppercase sm:w-auto sm:space-x-2"
        >
          <Icon
            class="h-6 w-6 stroke-current"
            name="pixelarticons:chevron-left"
          />
          <span class="w-48 overflow-hidden overflow-ellipsis whitespace-nowrap sm:w-32 lg:w-64">
            {previousPost.title}
          </span>
        </a>
      ) : (
        <div />
      )
    }
    {
      nextPost ? (
        <a
          href={`/blog/${nextPost.slug}`}
          title={nextPost.title}
          class="btn btn-ghost w-full justify-end uppercase sm:w-auto sm:space-x-2"
        >
          <span class="w-48 overflow-hidden overflow-ellipsis whitespace-nowrap sm:w-32 lg:w-64">
            {nextPost.title}
          </span>
          <Icon
            class="h-6 w-6 stroke-current"
            name="pixelarticons:chevron-right"
          />
        </a>
      ) : (
        <div />
      )
    }
  </div>
</ProseLayout>

<script>
  const wpReadingTimeElements = document.getElementsByClassName(
    "estimated-reading-time"
  );
  Array.from(wpReadingTimeElements).forEach((item) => item.remove());
</script>
