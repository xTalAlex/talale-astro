---
import { Icon } from "astro-icon/components";

import { episodes } from "@data/medabots";

import Layout from "@layouts/Layout.astro";

export async function getStaticPaths() {
  return episodes.map((episode, id) => {
    return {
      params: {
        season: episode.season,
        episode: episode.number,
      },
      props: {
        episode,
        previousEpisode:
          id > 0
            ? {
                title: episodes[id - 1].title,
                season: episodes[id - 1].season,
                number: episodes[id - 1].number,
              }
            : null,
        nextEpisode:
          id + 1 < episodes.length
            ? {
                title: episodes[id + 1].title,
                season: episodes[id + 1].season,
                number: episodes[id + 1].number,
              }
            : null,
      },
    };
  });
}

const { episode, previousEpisode, nextEpisode } = Astro.props;

const title = "Medabots - Episodio " + episode.number;
---

<Layout
  title={title}
  description={episode.title}
  ogImage={`https://img.youtube.com/vi/${episode.video_id}/0.jpg`}
  ogImageAlt={episode.title}
>
  <div class="container w-full max-w-5xl px-5 md:mx-auto">
    <h1 class="mt-12 text-center text-4xl font-bold">{title}</h1>
    <h2 class="mt-6 text-center text-2xl font-semibold">{episode.title}</h2>

    <div class="mt-12 grid h-full w-full place-items-center">
      <iframe
        type="text/html"
        class="aspect-video h-[30rem] w-full"
        src={`https://www.youtube-nocookie.com/embed/${episode.video_id}?enablejsapi=1`}
        allow="picture-in-picture; autoplay"
        allowfullscreen
        id="player"></iframe>
    </div>

    <button
      class="btn btn-neutral mb-12 w-full rounded-t-none uppercase"
      id="skip-intro">Salta Intro</button
    >

    <div class="divider"></div>

    <div
      class="flex flex-col space-y-4 sm:flex-row sm:justify-between sm:space-y-0"
    >
      {
        previousEpisode ? (
          <a
            href={`/medabots/${previousEpisode.season}/${previousEpisode.number}`}
            title={previousEpisode.title}
            class="btn btn-ghost w-full justify-start uppercase sm:w-auto sm:space-x-2"
          >
            <Icon
              class="h-6 w-6 stroke-current"
              name="pixelarticons:chevron-left"
            />
            <span class="w-48 overflow-hidden overflow-ellipsis whitespace-nowrap sm:w-32 lg:w-64">
              Episodio {previousEpisode.number}
            </span>
          </a>
        ) : (
          <div />
        )
      }
      {
        nextEpisode ? (
          <a
            href={`/medabots/${nextEpisode.season}/${nextEpisode.number}`}
            title={nextEpisode.title}
            class="btn btn-ghost w-full justify-end uppercase sm:w-auto sm:space-x-2"
          >
            <span class="w-48 overflow-hidden overflow-ellipsis whitespace-nowrap sm:w-32 lg:w-64">
              Episodio {nextEpisode.number}
            </span>
            <Icon
              class="h-6 w-6 stroke-current"
              name="pixelarticons:chevron-right"
            />
          </a>
        ) : (
          <div />
        )
      }
    </div>
  </div>
</Layout>

<script src="https://www.youtube.com/iframe_api" is:inline></script>
<script
  is:inline
  data-episode={JSON.stringify(episode)}
  data-next-episode={JSON.stringify(nextEpisode)}
>
  const startFrom = 107;
  const skipIntroButton = document.querySelector("#skip-intro");
  const episode = JSON.parse(document.currentScript.dataset.episode);
  const nextEpisode = JSON.parse(document.currentScript.dataset.nextEpisode);
  let player;

  function onYouTubeIframeAPIReady() {
    player = new YT.Player("player", {
      events: {
        onStateChange: checkState,
      },
    });
    skipIntroButton.classList.remove("hidden");
  }

  const checkState = ({ data }) => {
    toggleSkipIntroButton();
    if (data === 0) {
      localStorage.setItem("keepwatching", JSON.stringify(nextEpisode));
      storeAsUserMetadata({ keepwatching: nextEpisode });
    } else if (data == 1) {
      localStorage.setItem("keepwatching", JSON.stringify(episode));
      storeAsUserMetadata({ keepwatching: episode });
    }
  };

  const storeAsUserMetadata = (data) => {
    if (window.netlifyIdentity && netlifyIdentity.currentUser()) {
      netlifyIdentity.currentUser().update({
        data: data,
      });
    }
  };

  const toggleSkipIntroButton = () => {
    if (player) {
      if (player.getCurrentTime() < startFrom)
        skipIntroButton.classList.remove("hidden");
      else skipIntroButton.classList.add("hidden");
    }
  };

  const skipIntro = () => {
    if (player) {
      if (player.getCurrentTime() < startFrom) player.seekTo(startFrom);
      toggleSkipIntroButton();
      setTimeout(() => player.playVideo(), 500);
    }
  };

  skipIntroButton.onclick = skipIntro;
</script>
