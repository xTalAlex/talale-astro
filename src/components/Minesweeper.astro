---
import bomb from "../assets/images/bomb.png";
import electrode from "../assets/audio/electrode.mp3";

var table = new Array(10);
for (var i = 0; i < table.length; i++) {
    table[i] = new Array(10).fill(0);
}
---

<div class="">
    <div class="flex border-4 border-primary relative" id="board">
        {
            table.map((col, colId) => {
                return (
                    <div class="text-black">
                        {table.map((row, rowId) => {
                            return (
                                <div
                                    id={colId + "" + rowId}
                                    class="mine-cell font-black h-8 w-8 md:h-10 md:pt-1.5 md:w-10 z-10 text-center border-2 border-gray-500 bg-gray-400 shadow-inner hover:shadow-none hover:bg-gray-200 cursor-pointer"
                                />
                            );
                        })}
                    </div>
                );
            })
        }
        <img class=" h-full w-full object-cover bg-error hidden" id="gameOver" src={bomb} />
    </div>

    <audio id="electrode" class="hidden" src={electrode}></audio>

    <div class="mt-6 text-center">
        <button id="refresh" class="btn btn-secondary">New Game</button>
    </div>
</div>

<script>
    import bomb from "../assets/images/bomb.png";

    const nBombs = 10;
    const boardSize = 10;

    var gameOver = false;
    var checkedCtr = 0;

    var table = new Array(boardSize);
        for (var i = 0; i < table.length; i++) {
            table[i] = new Array(boardSize).fill(0);
        }
    var bombs = new Array(0);

    function init() {
        gameOver = false;
        checkedCtr = 0;

        table = new Array(boardSize);
        for (var i = 0; i < table.length; i++) {
            table[i] = new Array(boardSize).fill(0);
        }
        bombs = new Array(0);
        getBombs();
        getHints();
    }

    init();

    function getBombs() {
        while (bombs.length < nBombs) {
            var r = Math.floor(Math.random() * 100);
            if (bombs.indexOf(r) === -1) {
                bombs.push(r);
                table[Math.floor(r / 10)][r % 10] = "X";
            }
        }
    }

    function getAdjacentCells(col, row) {
        var cells = Array();
        var startCol = col - 1 >= 0 ? col - 1 : 0;
        var endCol = col + 1 < boardSize ? col + 1 : col;
        var startRow = row - 1 >= 0 ? row - 1 : 0;
        var endRow = row + 1 < boardSize ? row + 1 : row;
        for (let colId = startCol; colId < endCol + 1; colId++)
            for (let rowId = startRow; rowId < endRow + 1; rowId++)
                if (!(rowId == row && colId == col))
                    cells.push({
                        col: colId,
                        row: rowId,
                    });
        return cells;
    }

    function getHints() {
        bombs.forEach((bomb) => {
            var adjacentCells = getAdjacentCells(
                Math.floor(bomb / boardSize),
                bomb % boardSize
            );
            adjacentCells.forEach(
                (cell) =>
                    table[cell.col][cell.row] != "X" &&
                    table[cell.col][cell.row]++
            );
        });
    }

    function checkWin() {
        if(checkedCtr == (boardSize*boardSize - nBombs) ){
            alert('VITTORIA');
            gameOver = true;
        }
        console.log(checkedCtr);
    }

    function getColor(n) {
        var color = "text-gray-300";
        switch (true) {
            case n == 1:
                color = "text-info";
                break;
            case n == 2:
                color = "text-warning";
                break;
            case n >= 3:
                color = "text-error";
                break;
            default:
                color = "text-gray-300";
                break;
        }
        return color;
    }

    const checkAdjacentEmpty = (col, row) => {
        var cells = getAdjacentCells(col, row);
        cells.forEach((cell) => {
            if (
                document.getElementById(cell.col + "" + cell.row).innerHTML ==
                    "" &&
                table[cell.col][cell.row] != "X"
            ) {
                checkCell(cell.col * 10 + cell.row);
            }
        });
    };

    const checkCell = (id) => {
        if (!gameOver) {
            var newCheck = document.getElementById(
                    Math.floor(id / 10) + "" + (id % 10)
                ).innerHTML == '';
            if (table[Math.floor(id / 10)][id % 10] == "X") {
                document.getElementById(
                    Math.floor(id / 10) + "" + (id % 10)
                ).innerHTML = `<img class="h-8 w-8 md:h-10 md:w-10 md:-mt-1.5" src='https://img.pokemondb.net/sprites/ruby-sapphire/normal/electrode.png'/>`;
                gameOver = true;
                document.getElementById("electrode").play();
            } else {
                document.getElementById(
                    Math.floor(id / 10) + "" + (id % 10)
                ).innerHTML = table[Math.floor(id / 10)][id % 10];
                document
                    .getElementById(Math.floor(id / 10) + "" + (id % 10))
                    .classList.add(
                        getColor(table[Math.floor(id / 10)][id % 10])
                    );
            }
            if( newCheck ) {
                checkedCtr++;
                checkWin();
            }
            document
                .getElementById(Math.floor(id / 10) + "" + (id % 10))
                .classList.remove("bg-gray-400");
            document
                .getElementById(Math.floor(id / 10) + "" + (id % 10))
                .classList.add("bg-gray-200");
            
            if (table[Math.floor(id / 10)][id % 10] == 0)
                checkAdjacentEmpty(Math.floor(id / 10), id % 10);
        }
    };

    const click = (event) => {
        if(event.target.tagName != "IMG") checkCell(event.target.id);
    };

    const cells = document.querySelectorAll(".mine-cell");
    cells.forEach((cell) => {
        cell.onclick = click
        cell.oncontextmenu = (e) => {
            e.preventDefault();
            if(!gameOver){
                var el = e.target;
                if(el.innerHTML == ''){
                    el.innerHTML = "<img class='h-8 w-8 md:h-10 md:w-10 md:-mt-1.5' src='https://raw.githubusercontent.com/msikma/pokesprite/master/items-outline/hold-item/magnet.png'/>";
                    //checkedCtr++;
                    //checkWin();
                }
                if(el.tagName == "IMG" && el.getAttribute('src') == 'https://raw.githubusercontent.com/msikma/pokesprite/master/items-outline/hold-item/magnet.png' ){
                    el.remove();
                    //checkedCtr --;
                }   
            }
        }
    });

    const reset = () => {
        init();
        cells.forEach( (cell) => {
            cell.innerHTML = ''
            cell.classList.remove('bg-gray-200','text-info','text-warning','text-error','text-gray-300');
            cell.classList.add('bg-gray-400')
        });
        document.getElementById('gameOver').classList.add('hidden');
    };
    document.getElementById('refresh').onclick = reset;

</script>
