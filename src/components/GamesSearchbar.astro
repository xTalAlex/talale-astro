---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import { gamesCount } from "@data/gamesCatalog";
import { lastDeployDate, formatDate } from "@lib/utils";
import gargoyles from "@assets/images/gargoyles.png";
---

<div class="form-control relative mx-auto w-full">
  <div class="join">
    <input
      type="text"
      id="search-input"
      placeholder="Focus: ctrl+c | Clear: ctrl+x"
      class="input join-item input-bordered w-full placeholder:text-xs"
    />
    <button
      class="btn btn-square btn-error join-item uppercase"
      id="clear-button"
    >
      <Icon class="h-6 w-6 stroke-current" name="pixelarticons:close" />
    </button>
    <button
      class="btn btn-square btn-primary join-item uppercase"
      id="search-button"
    >
      <Icon class="h-6 w-6 stroke-current" name="pixelarticons:search" />
    </button>
  </div>
</div>

<div class="mt-12 flex w-full items-center justify-center">
  <div class="hidden select-none overflow-x-auto pb-4" id="search-results">
  </div>
  <div class="hidden" id="no-results">
    <Image class="h-24 w-auto" src={gargoyles} alt="Nessun risultato" />
    <h4 class="text-center text-lg"><b>Nessun risultato</b></h4>
  </div>
  <div
    class="stats cursor-default bg-primary text-primary-content shadow"
    id="placeholder"
  >
    <div class="stat">
      <div class="stat-title font-semibold text-primary-content">
        Numero di titoli
      </div>
      <div class="stat-value">{gamesCount}</div>
      <div class="stat-desc font-semibold text-primary-content">
        Ultimo aggiornamento {formatDate(lastDeployDate)}
      </div>
    </div>
  </div>
</div>

<script>
  import Fuse from "fuse.js";
  import { searchOptions } from "@lib/fuseHelpers.js";
  import { delayFunction, toTrimmedAlphanumeric } from "@lib/utils.js";
  import Config from "@config/general.json";

  const searchInput = document.getElementById("search-input");
  const searchButton = document.getElementById("search-button");
  const clearButton = document.getElementById("clear-button");
  const placeholder = document.getElementById("placeholder");
  const noResults = document.getElementById("no-results");
  const searchResults = document.getElementById("search-results");

  var response = await fetch("/searchindex.json");
  const data = await response.json();
  const fuse = new Fuse(data, searchOptions);

  const search = async () => {
    var query = toTrimmedAlphanumeric(searchInput.value);
    if (query.length > 2) {
      noResults.classList.add("hidden");
      const res = fuse.search(query);
      var html = "";
      if (res.length) {
        html += "";
        for (let i = 0; i < res.length; i++) {
          html += `
              <a href="/nintendo-switch/${getPageNumberByRef(res[i].refIndex)}#${res[i].item.slug}">
                  <div class="m-1 whitespace-nowrap badge badge-lg badge-primary font-semibold badge-outline">${res[i].item.name}</div>    
              </a>
          `;
        }
      } else {
        noResults.classList.remove("hidden");
      }
      placeholder.classList.add("hidden");
      searchResults.classList.remove("hidden");
      searchResults.innerHTML = html;
      window.history.replaceState(
        null,
        "",
        "?query=" + encodeURIComponent(query),
      );
    }
  };

  const quickSearch = async (query: string) => {
    const res = fuse.search(query);
    if (res.length) {
      let gameUrl = `/nintendo-switch/${getPageNumberByRef(res[0].refIndex)}#${res[0].item.slug}`;
      window.location.href = gameUrl;
    }
  };

  const getPageNumberByRef = (ref) => {
    return Math.max(Math.ceil(ref / Config.igdb.gamesPerPage), 1);
  };

  const clear = () => {
    searchInput.value = "";
    searchResults.innerHTML = "";
    noResults.classList.add("hidden");
    searchResults.classList.add("hidden");
    placeholder.classList.remove("hidden");
    window.history.replaceState(null, "", window.location.pathname);
  };

  searchInput.onkeyup = delayFunction(search, 300);
  searchButton.onclick = search;
  clearButton.onclick = clear;

  document.addEventListener("keyup", (event) => {
    if (event.ctrlKey && event.key === "c") {
      event.preventDefault();
      searchInput.focus();
    }
  });
  document.addEventListener("keyup", (event) => {
    if (event.ctrlKey && event.key === "x") {
      event.preventDefault();
      clear();
    }
  });

  document.addEventListener("quickSearch", (event) => {
    if (event.detail) quickSearch(event.detail);
  });

  var params = new URL(document.location).searchParams;
  var query = params.get("query");
  if (query) {
    searchInput.value = decodeURIComponent(query);
    search();
  } else if (searchInput.value) {
    search();
  }
</script>
